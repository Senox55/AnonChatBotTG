import logging
from typing import Callable, Dict, Any, Awaitable
from aiogram import BaseMiddleware
from aiogram.types import Message
from redis.exceptions import RedisError

from app.tgbot.utils.utils import parse_user_info
from app.tgbot.states.registration import RegistrationFSM
from app.tgbot.keyboards import *

logger = logging.getLogger(__name__)


class RegistrationCheckMiddleware(BaseMiddleware):
    async def __call__(
            self,
            handler: Callable[[Message, Dict[str, Any]], Awaitable[Any]],
            event: Message,
            data: Dict[str, Any]
    ) -> Any:
        """
        –õ—é–±–æ–µ –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º:
        - –ï—Å—Ç—å –ª–∏ –ø–æ–ª –∏ –≤–æ–∑—Ä–∞—Å—Ç –≤ –±–∞–∑–µ?
        - –ï—Å–ª–∏ –Ω–µ—Ç, —Å—Ç–∞–≤–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é FSM.fill_gender –∏–ª–∏ fill_age
          (—Å–º–æ—Ç—Ä—è, —á—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç) –∏ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏.
        - –ò –Ω–µ –¥–∞—ë–º –∏–¥—Ç–∏ –¥–∞–ª—å—à–µ –ø–æ —Ö–µ–Ω–¥–ª–µ—Ä–∞–º.
        """
        db = data["db"]
        redis = data["redis"]
        translator = data['translator']
        state = data["state"]

        user_data = await state.get_data()
        user_id = event.chat.id

        user_info = await redis.hgetall(name=f"users:{user_id}")

        logger.info(f"User {user_id} redis_data: {user_info}")

        if not user_info:
            logger.info(f"User {user_id} not found in Redis")
            user_info = parse_user_info(await db.get_user_info(user_id))

            logger.info(f"User {user_id} postgres_data: {user_info}")

            try:
                logger.info(f"User {user_id} parsed_data: {user_info}")
                await redis.hset(name=f"users:{user_id}", mapping=user_info)
                logger.info(f"User info stored in Redis for user ID: {user_id}")
            except RedisError as e:
                logger.error(f"Error storing user info in Redis for user ID: {user_id}: {e}")

        if not user_info:
            if not user_data.get('gender'):
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ "–≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª"
                await state.set_state(RegistrationFSM.FILL_GENDER)
                if event.text in (
                        ["–Ø –ü–∞—Ä–µ–Ω—å üôã‚Äç‚ôÇÔ∏è", "–Ø –î–µ–≤—É—à–∫–∞ üôã‚Äç‚ôÄÔ∏è"]):
                    return await handler(event, data)
                await event.answer(translator.get('set_gender'),
                                   reply_markup=keyboard_before_set_gender)
                return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º, —á—Ç–æ–±—ã –Ω–µ –≤—ã–∑—ã–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π handler
            elif not user_data.get('age'):
                await state.set_state(RegistrationFSM.FILL_AGE)
                if event.text in (
                        ['üìç –î–æ 17', 'üìç 18-21', 'üìç 22-25', 'üìç 26-35', 'üìç 36-45', 'üìç 46+']):
                    return await handler(event, data)
                await event.answer(translator.get('set_age'),
                                   reply_markup=keyboard_before_set_age)
                return


        # –ï—Å–ª–∏ –≤—Å—ë –Ω–æ—Ä–º–∞–ª—å–Ω–æ (–ª–∏–±–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ª–∏–±–æ —É–∂–µ –≤–Ω—É—Ç—Ä–∏ FSM), –∏–¥—ë–º –¥–∞–ª—å—à–µ.
        return await handler(event, data)
