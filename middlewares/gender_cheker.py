from typing import Callable, Dict, Any, Awaitable, Union
from aiogram import BaseMiddleware
from aiogram.types import Message, CallbackQuery
from keyboards import *


class GenderCheckerMiddleware(BaseMiddleware):
    async def __call__(
            self,
            handler: Callable[[Message, Dict[str, Any]], Awaitable[Any]],
            event: Union[Message, CallbackQuery],
            data: Dict[str, Any]
    ) -> Any:
        if event.message:
            user_id = event.message.from_user.id
            event_obj = event.message
        elif event.callback_query:
            user_id = event.callback_query.from_user.id
            event_obj = event.callback_query
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ –¥—Ä—É–≥–æ–π —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
            return await handler(event, data)

        db = data["db"]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã –±–µ–∑ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–µ–Ω–¥–µ—Ä–∞
        if isinstance(event_obj, Message) and event_obj.text and event_obj.text in (
        ['–Ø –ü–∞—Ä–µ–Ω—å üôã‚Äç‚ôÇÔ∏è', '–Ø –î–µ–≤—É—à–∫–∞ üôã‚Äç‚ôÄÔ∏è']):
            return await handler(event, data)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≥–µ–Ω–¥–µ—Ä–∞
        gender = await db.get_gender(user_id)
        if not gender:
            if isinstance(event_obj, Message):
                await event_obj.answer(
                    "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
                    reply_markup=keyboard_before_set_gender
                )
            elif isinstance(event_obj, CallbackQuery):
                await event_obj.answer("–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª", show_alert=True)
            return

        return await handler(event, data)
