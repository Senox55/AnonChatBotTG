from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram import Dispatcher, F
from aiogram.types import Message

from keyboards import *


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≥–µ–Ω–¥–µ—Ä–∞
async def ask_for_gender(message: Message):
    user_id = message.chat.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ –≥–µ–Ω–¥–µ—Ä
    setted_gender = await db.get_gender(user_id)
    if setted_gender:
        await message.answer("–í–∞—à –ø–æ–ª —É–∂–µ —É–∫–∞–∑–∞–Ω. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.")
        return

    # –ï—Å–ª–∏ –≥–µ–Ω–¥–µ—Ä –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –µ–≥–æ
    await message.answer(
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
        reply_markup=keyboard_before_set_gender
    )


async def set_gender(message: Message):
    if not await db.get_user_info(message.chat.id):
        if message.text == '–Ø –ü–∞—Ä–µ–Ω—å üôã‚Äç‚ôÇÔ∏è':
            gender = 'male'
        elif message.text == '–Ø –î–µ–≤—É—à–∫–∞ üôã‚Äç‚ôÄÔ∏è':
            gender = 'female'
        else:
            return  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await db.set_gender(message.chat.id, gender)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
        await message.answer(
            '–í–∞—à –ø–æ–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.',
            reply_markup=keyboard_before_start_search
        )


def register_handlers_ask_for_gender(dp: Dispatcher):
    dp.message.register(ask_for_gender)
    dp.message.register(set_gender, F.text.in_(['–Ø –ü–∞—Ä–µ–Ω—å üôã‚Äç‚ôÇÔ∏è', '–Ø –î–µ–≤—É—à–∫–∞ üôã‚Äç‚ôÄÔ∏è']))
