from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup, \
    CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from database import Database
from config import bot_token
from functools import wraps

BOT_TOKEN = bot_token

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

db = Database()

button_edit_profile_inline = InlineKeyboardButton(
    text='–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å',
    callback_data='edit_profile_pressed'
)

button_set_male_inline = InlineKeyboardButton(
    text='–Ø –ü–∞—Ä–µ–Ω—å üôã‚Äç‚ôÇ',
    callback_data='set_male_pressed'
)

button_set_female_inline = InlineKeyboardButton(
    text='–Ø –î–µ–≤—É—à–∫–∞ üôã‚Äç‚ôÄÔ∏è',
    callback_data='set_female_pressed'
)

button_search_random = KeyboardButton(text='üîç–ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ')
button_search_by_gender = KeyboardButton(text='üë´–ü–æ–∏—Å–∫ –ø–æ –ø–æ–ª—É')
button_stop_search = KeyboardButton(text='‚úã –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫')
button_stop_dialog = KeyboardButton(text='‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥')
button_set_male = KeyboardButton(text='–Ø –ü–∞—Ä–µ–Ω—å üôã‚Äç‚ôÇÔ∏è')
button_set_female = KeyboardButton(text='–Ø –î–µ–≤—É—à–∫–∞ üôã‚Äç‚ôÄÔ∏è')
button_search_male = KeyboardButton(text='–ù–∞–π—Ç–∏ –ü–∞—Ä–Ω—è üôã‚Äç‚ôÇÔ∏è')
button_search_female = KeyboardButton(text='–ù–∞–π—Ç–∏ –î–µ–≤—É—à–∫—É üôã‚Äç‚ôÄÔ∏è')
button_profile = KeyboardButton(text='üë§ –ü—Ä–æ—Ñ–∏–ª—å')

keyboard_before_start_search = ReplyKeyboardMarkup(
    keyboard=[[button_search_random],
              [button_search_by_gender],
              [button_profile]], resize_keyboard=True, row_width=1)

keyboard_after_start_research = ReplyKeyboardMarkup(keyboard=[[button_stop_search]], resize_keyboard=True)
keyboard_after_find_dialog = ReplyKeyboardMarkup(keyboard=[[button_stop_dialog]], resize_keyboard=True)
keyboard_before_set_gender = ReplyKeyboardMarkup(keyboard=[[button_set_male, button_set_female]], resize_keyboard=True)

keyboard_before_change_gender_inline = InlineKeyboardMarkup(
    inline_keyboard=[[button_set_male_inline, button_set_female_inline]])

keyboard_edit_profile_inline = InlineKeyboardMarkup(inline_keyboard=[[button_edit_profile_inline]])

keyboard_choose_gender_search = ReplyKeyboardMarkup(keyboard=[[button_search_male, button_search_female]],
                                                    resize_keyboard=True)


def gender_required(func):
    @wraps(func)
    async def wrapper(message: Message, *args, **kwargs):
        setted_gender = await db.get_gender(message.chat.id)
        if not setted_gender:
            await message.answer(
                '–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª: ',
                reply_markup=keyboard_before_set_gender
            )
            return
        return await func(message, *args, **kwargs)

    return wrapper


async def start_search(message: Message, desired_gender: str = 'anon'):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.

    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param desired_gender: –ü–æ–ª —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –∏—â–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ('male', 'female', 'anon').
    """
    user_info = await db.get_chat(desired_gender)
    chat_two = user_info[0]
    gender = user_info[1]
    desired_gender_of_other = user_info[2]  # –ü–æ–ª, –∫–æ—Ç–æ—Ä—ã–π –∏—â–µ—Ç –¥—Ä—É–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

    is_in_queue = await db.is_in_queue(message.chat.id)
    chat_info = await db.get_active_chat(message.chat.id)

    if not is_in_queue:
        if not chat_info:
            if (message.chat.id == chat_two
                    or user_info == [0]
                    or (desired_gender_of_other != 'anon' and await db.get_gender(
                        message.chat.id) != desired_gender_of_other)
                    or not await db.create_chat(message.chat.id, chat_two)):

                await db.add_queue(message.chat.id, await db.get_gender(message.chat.id), desired_gender)
                await message.answer(
                    '–ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞... üîç\n\n'
                    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ ‚Äî –º—ã —É–∂–µ –ø–æ–¥–±–∏—Ä–∞–µ–º –¥–ª—è –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞. üòä',
                    reply_markup=keyboard_after_start_research
                )
            else:
                mess = '''üéâ –£—Ä–∞! –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! \n\n–ù–∞—á–∏–Ω–∞–π—Ç–µ –æ–±—â–µ–Ω–∏–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.\n/next ‚Äî –∏—Å–∫–∞—Ç—å –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\n/stop ‚Äî –∑–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥'''
                await bot.send_message(
                    message.chat.id,
                    mess,
                    reply_markup=keyboard_after_find_dialog
                )
                await bot.send_message(
                    chat_two,
                    mess,
                    reply_markup=keyboard_after_find_dialog
                )
        else:
            await message.answer(
                "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ ü§î\n/next ‚Äî –∏—Å–∫–∞—Ç—å –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\n/stop ‚Äî –∑–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥",
                reply_markup=keyboard_after_find_dialog
            )

    else:
        await message.answer(
            '–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø–æ–∏—Å–∫–µ üïµÔ∏è‚Äç‚ôÇÔ∏è.\n'
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ –º—ã –Ω–∞–π–¥–µ–º –¥–ª—è –≤–∞—Å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞. ‚è≥\n\n'
            '–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫, –Ω–∞–∂–º–∏—Ç–µ "‚úã –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫" –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /stop.',
            reply_markup=keyboard_after_start_research
        )


@dp.message(CommandStart())
@gender_required
async def process_start_command(message: Message):
    await start_search(message, desired_gender='anon')


@dp.message(Command(commands=['search']))
@gender_required
async def process_start_command(message: Message):
    await start_search(message, desired_gender='anon')


@dp.message(Command(commands=['next']))
@gender_required
async def process_start_command(message: Message, desired_gender='anon'):
    chat_info = await db.get_active_chat(message.chat.id)
    if chat_info:
        await db.delete_chat(chat_info[0])
        await bot.send_message(
            message.chat.id,
            "–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ —á–∞—Ç ‚ùå",
            reply_markup=keyboard_before_start_search,
        )
        await bot.send_message(
            chat_info[1],
            "–í–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥ ‚ùå",
            reply_markup=keyboard_before_start_search
        )

    user_info = await db.get_chat(desired_gender)
    chat_two = user_info[0]
    gender = user_info[1]
    desired_gender_of_other = user_info[2]  # –ü–æ–ª, –∫–æ—Ç–æ—Ä—ã–π –∏—â–µ—Ç –¥—Ä—É–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

    is_in_queue = await db.is_in_queue(message.chat.id)

    if not is_in_queue:
        if (message.chat.id == chat_two
                or user_info == [0]
                or (desired_gender_of_other != 'anon' and await db.get_gender(
                    message.chat.id) != desired_gender_of_other)
                or not await db.create_chat(message.chat.id, chat_two)):

            await db.add_queue(message.chat.id, await db.get_gender(message.chat.id), desired_gender)
            await message.answer(
                '–ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞... üîç\n\n'
                '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ ‚Äî –º—ã —É–∂–µ –ø–æ–¥–±–∏—Ä–∞–µ–º –¥–ª—è –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞. üòä',
                reply_markup=keyboard_after_start_research
            )
        else:
            mess = '''üéâ –£—Ä–∞! –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! \n\n–ù–∞—á–∏–Ω–∞–π—Ç–µ –æ–±—â–µ–Ω–∏–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.\n/next ‚Äî –∏—Å–∫–∞—Ç—å –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\n/stop ‚Äî –∑–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥'''
            await bot.send_message(
                message.chat.id,
                mess,
                reply_markup=keyboard_after_find_dialog
            )
            await bot.send_message(
                chat_two,
                mess,
                reply_markup=keyboard_after_find_dialog
            )
    else:
        await message.answer(
            '–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø–æ–∏—Å–∫–µ üïµÔ∏è‚Äç‚ôÇÔ∏è.\n'
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ –º—ã –Ω–∞–π–¥–µ–º –¥–ª—è –≤–∞—Å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞. ‚è≥\n\n'
            '–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫, –Ω–∞–∂–º–∏—Ç–µ "‚úã –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫" –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /stop.',
            reply_markup=keyboard_after_start_research
        )


@dp.message(F.text == 'üë´–ü–æ–∏—Å–∫ –ø–æ –ø–æ–ª—É')
@gender_required
async def process_choose_gender_search(message: Message):
    await message.answer(
        '–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –ø–æ–ª —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞:',
        reply_markup=keyboard_choose_gender_search
    )


@dp.message(F.text == 'üîç–ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ')
@gender_required
async def process_start_search_random_command(message: Message):
    await start_search(message, desired_gender='anon')


@dp.message(F.text == '–ù–∞–π—Ç–∏ –ü–∞—Ä–Ω—è üôã‚Äç‚ôÇÔ∏è')
@gender_required
async def process_start_search_male_command(message: Message):
    await start_search(message, desired_gender='male')


@dp.message(F.text == '–ù–∞–π—Ç–∏ –î–µ–≤—É—à–∫—É üôã‚Äç‚ôÄÔ∏è')
@gender_required
async def process_start_search_male_command(message: Message):
    await start_search(message, desired_gender='female')


async def stop_dialog(message: Message):
    chat_info = await db.get_active_chat(message.chat.id)
    if chat_info:
        await increment_chat_count(message.chat.id)
        await increment_chat_count(chat_info[1])

        await db.delete_chat(chat_info[0])

        await bot.send_message(
            message.chat.id,
            "–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ —á–∞—Ç ‚ùå",
            reply_markup=keyboard_before_start_search,
        )
        await bot.send_message(
            chat_info[1],
            "–í–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥ ‚ùå",
            reply_markup=keyboard_before_start_search
        )
    else:
        is_in_queue = await db.is_in_queue(message.chat.id)
        if is_in_queue:
            await db.delete_queue(message.chat.id)
            await message.answer(
                'üîï –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω—ë–Ω.',
                reply_markup=keyboard_before_start_search
            )
        else:
            await message.answer(
                '‚ö† –í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –¥–∏–∞–ª–æ–≥–µ.\n'
                '–ù–∞–ø–∏—à–∏—Ç–µ /search, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞',
                reply_markup=keyboard_before_start_search
            )


@dp.message(Command(commands=['stop']))
@gender_required
async def process_stop_command(message: Message):
    await stop_dialog(message)


@dp.message(F.text == '‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥')
@gender_required
async def process_stop_button(message: Message):
    await stop_dialog(message)


@dp.message(F.text == '‚úã –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫')
@gender_required
async def process_finish_search_command(message: Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –æ—á–µ—Ä–µ–¥–∏
    is_in_queue = await db.is_in_queue(message.chat.id)

    if is_in_queue:
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏, –µ—Å–ª–∏ –æ–Ω –≤ –ø–æ–∏—Å–∫–µ
        await db.delete_queue(message.chat.id)
        await message.answer(
            '–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω—ë–Ω',
            reply_markup=keyboard_before_start_search
        )
    else:
        # –£–≤–µ–¥–æ–º–ª—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –ø–æ–∏—Å–∫–µ
        await message.answer(
            '–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø–æ–∏—Å–∫–µ.',

            reply_markup=keyboard_before_start_search
        )


@dp.message(F.text.in_(['–Ø –ü–∞—Ä–µ–Ω—å üôã‚Äç‚ôÇÔ∏è', '–Ø –î–µ–≤—É—à–∫–∞ üôã‚Äç‚ôÄÔ∏è']))
async def set_gender(message: Message):
    if not await db.get_user_info(message.chat.id):
        if message.text == '–Ø –ü–∞—Ä–µ–Ω—å üôã‚Äç‚ôÇÔ∏è':
            gender = 'male'
        elif message.text == '–Ø –î–µ–≤—É—à–∫–∞ üôã‚Äç‚ôÄÔ∏è':
            gender = 'female'
        else:
            return  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await db.set_gender(message.chat.id, gender)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
        await message.answer(
            '–í–∞—à –ø–æ–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.',
            reply_markup=keyboard_before_start_search
        )


@dp.callback_query(F.data == 'set_male_pressed')
async def process_set_male_gender(callback: CallbackQuery):
    await db.update_gender(callback.message.chat.id, 'male')
    await callback.message.edit_text(
        '–í–∞—à –ø–æ–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.',
        reply_markup=None)


@dp.callback_query(F.data == 'set_female_pressed')
async def process_set_male_gender(callback: CallbackQuery):
    await db.update_gender(callback.message.chat.id, 'female')
    await callback.message.edit_text(
        '–í–∞—à –ø–æ–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.',
        reply_markup=None)


async def increment_chat_count(user_id: int):
    await db.increment_chat_count(user_id)


async def show_profile(message: Message):
    user_id = message.chat.id
    user_info = await db.get_user_info(user_id)

    if user_info:
        chat_count = user_info[3]
        gender = user_info[2]

        profile_message = (
            f"<b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
            f"üí¨ –ß–∞—Ç–æ–≤ ‚Äî {chat_count}\n"
            f"–ü–æ–ª ‚Äî {gender}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:"
        )

        await message.answer(profile_message, parse_mode="HTML", reply_markup=keyboard_edit_profile_inline)


@dp.message(Command(commands=['profile']))
@gender_required
async def process_profile_command(message: Message):
    await show_profile(message)


@dp.message(F.text == 'üë§ –ü—Ä–æ—Ñ–∏–ª—å')
@gender_required
async def process_profile_button(message: Message):
    await show_profile(message)


@dp.callback_query(F.data == 'edit_profile_pressed')
async def process_button_2_press(callback: CallbackQuery):
    await callback.message.edit_text(
        text='1.–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:',
        reply_markup=keyboard_before_change_gender_inline
    )


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class GenderChange(StatesGroup):
    waiting_for_gender = State()


@dp.message(lambda message: message.text in ['–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª'])
async def change_gender(message: Message, state: FSMContext):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:\n"
        "–ú—É–∂—á–∏–Ω–∞ \n"
        "–ñ–µ–Ω—â–∏–Ω–∞",
        reply_markup=keyboard_before_change_gender_inline
    )
    await state.set_state(GenderChange.waiting_for_gender)


@dp.message(GenderChange.waiting_for_gender)
async def set_gender_for_profile(message: Message, state: FSMContext):
    if message.text == '–ú—É–∂—á–∏–Ω–∞':
        gender = 'male'
    elif message.text == '–ñ–µ–Ω—â–∏–Ω–∞':
        gender = 'female'
    else:
        return  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await db.update_gender(message.chat.id, gender)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –ø—Ä–æ—Ñ–∏–ª—è
    await message.answer(
        '–í–∞—à –ø–æ–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω!',
        reply_markup=keyboard_before_start_search
    )
    await state.clear()


@dp.message()
@gender_required
async def process_chatting(message: Message):
    chat_info = await db.get_active_chat(message.chat.id)
    is_in_queue = await db.is_in_queue(message.chat.id)
    if chat_info:
        await message.send_copy(chat_id=chat_info[1])
    elif is_in_queue:
        await message.answer(
            '–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø–æ–∏—Å–∫–µ üïµÔ∏è‚Äç‚ôÇÔ∏è.\n'
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ –º—ã –Ω–∞–π–¥–µ–º –¥–ª—è –≤–∞—Å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞. ‚è≥\n\n'
            '–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫, –Ω–∞–∂–º–∏—Ç–µ "‚úã –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫" –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /stop.',
            reply_markup=keyboard_after_start_research
        )
    else:
        await message.answer(
            '–í—ã –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∏ –¥–∏–∞–ª–æ–≥',
            reply_markup=keyboard_before_start_search
        )


if __name__ == '__main__':
    dp.run_polling(bot)
